/*
 * This file is generated by jOOQ.
 */
package br.com.my.infraestrutura.jooq.persistence.tables


import br.com.my.infraestrutura.jooq.persistence.DefaultSchema
import br.com.my.infraestrutura.jooq.persistence.keys.KEY_ALUNO_DOCUMENTO
import br.com.my.infraestrutura.jooq.persistence.keys.KEY_ALUNO_MATRICULA
import br.com.my.infraestrutura.jooq.persistence.keys.KEY_ALUNO_PRIMARY

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Aluno(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>aluno</code>
         */
        val ALUNO: Aluno = Aluno()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>aluno.id</code>.
     */
    val ID: TableField<Record, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>aluno.nome</code>.
     */
    val NOME: TableField<Record, String?> = createField(DSL.name("nome"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>aluno.documento</code>.
     */
    val DOCUMENTO: TableField<Record, String?> = createField(DSL.name("documento"), SQLDataType.VARCHAR(24).nullable(false), this, "")

    /**
     * The column <code>aluno.matricula</code>.
     */
    val MATRICULA: TableField<Record, String?> = createField(DSL.name("matricula"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>aluno</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>aluno</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>aluno</code> table reference
     */
    constructor(): this(DSL.name("aluno"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ALUNO, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<Record, Long?> = super.getIdentity() as Identity<Record, Long?>
    override fun getPrimaryKey(): UniqueKey<Record> = KEY_ALUNO_PRIMARY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(KEY_ALUNO_DOCUMENTO, KEY_ALUNO_MATRICULA)
    override fun `as`(alias: String): Aluno = Aluno(DSL.name(alias), this)
    override fun `as`(alias: Name): Aluno = Aluno(alias, this)
    override fun `as`(alias: Table<*>): Aluno = Aluno(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Aluno = Aluno(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Aluno = Aluno(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Aluno = Aluno(name.getQualifiedName(), null)
}
